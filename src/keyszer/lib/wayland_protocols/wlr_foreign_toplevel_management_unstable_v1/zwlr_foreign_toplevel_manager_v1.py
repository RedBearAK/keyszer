# This file has been autogenerated by the pywayland scanner

# Copyright Â© 2018 Ilia Bozhinov
#
# Permission to use, copy, modify, distribute, and sell this
# software and its documentation for any purpose is hereby granted
# without fee, provided that the above copyright notice appear in
# all copies and that both that copyright notice and this permission
# notice appear in supporting documentation, and that the name of
# the copyright holders not be used in advertising or publicity
# pertaining to distribution of the software without specific,
# written prior permission.  The copyright holders make no
# representations about the suitability of this software for any
# purpose.  It is provided "as is" without express or implied
# warranty.
#
# THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
# SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
# SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
# AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
# THIS SOFTWARE.

from __future__ import annotations


from pywayland.protocol_core import (
    Argument,
    ArgumentType,
    Global,
    Interface,
    Proxy,
    Resource,
)
from .zwlr_foreign_toplevel_handle_v1 import ZwlrForeignToplevelHandleV1


class ZwlrForeignToplevelManagerV1(Interface):
    """List and control opened apps

    The purpose of this protocol is to enable the creation of taskbars and
    docks by providing them with a list of opened applications and letting them
    request certain actions on them, like maximizing, etc.

    After a client binds the :class:`ZwlrForeignToplevelManagerV1`, each opened
    toplevel window will be sent via the toplevel event
    """

    name = "zwlr_foreign_toplevel_manager_v1"
    version = 3


class ZwlrForeignToplevelManagerV1Proxy(Proxy[ZwlrForeignToplevelManagerV1]):
    interface = ZwlrForeignToplevelManagerV1

    @ZwlrForeignToplevelManagerV1.request()
    def stop(self) -> None:
        """Stop sending events

        Indicates the client no longer wishes to receive events for new
        toplevels. However the compositor may emit further toplevel_created
        events, until the finished event is emitted.

        The client must not send any more requests after this one.
        """
        self._marshal(0)


class ZwlrForeignToplevelManagerV1Resource(Resource):
    interface = ZwlrForeignToplevelManagerV1

    @ZwlrForeignToplevelManagerV1.event(
        Argument(ArgumentType.NewId, interface=ZwlrForeignToplevelHandleV1),
    )
    def toplevel(self, toplevel: ZwlrForeignToplevelHandleV1) -> None:
        """A toplevel has been created

        This event is emitted whenever a new toplevel window is created. It is
        emitted for all toplevels, regardless of the app that has created them.

        All initial details of the toplevel(title, app_id, states, etc.) will
        be sent immediately after this event via the corresponding events in
        :class:`~pywayland.protocol.wlr_foreign_toplevel_management_unstable_v1.ZwlrForeignToplevelHandleV1`.

        :param toplevel:
        :type toplevel:
            :class:`~pywayland.protocol.wlr_foreign_toplevel_management_unstable_v1.ZwlrForeignToplevelHandleV1`
        """
        self._post_event(0, toplevel)

    @ZwlrForeignToplevelManagerV1.event()
    def finished(self) -> None:
        """The compositor has finished with the toplevel manager

        This event indicates that the compositor is done sending events to the
        :class:`ZwlrForeignToplevelManagerV1`. The server will destroy the
        object immediately after sending this request, so it will become
        invalid and the client should free any resources associated with it.
        """
        self._post_event(1)


class ZwlrForeignToplevelManagerV1Global(Global):
    interface = ZwlrForeignToplevelManagerV1


ZwlrForeignToplevelManagerV1._gen_c()
ZwlrForeignToplevelManagerV1.proxy_class = ZwlrForeignToplevelManagerV1Proxy
ZwlrForeignToplevelManagerV1.resource_class = ZwlrForeignToplevelManagerV1Resource
ZwlrForeignToplevelManagerV1.global_class = ZwlrForeignToplevelManagerV1Global
