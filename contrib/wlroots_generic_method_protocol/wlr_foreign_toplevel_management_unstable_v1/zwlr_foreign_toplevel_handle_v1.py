# This file has been autogenerated by the pywayland scanner

# Copyright Â© 2018 Ilia Bozhinov
#
# Permission to use, copy, modify, distribute, and sell this
# software and its documentation for any purpose is hereby granted
# without fee, provided that the above copyright notice appear in
# all copies and that both that copyright notice and this permission
# notice appear in supporting documentation, and that the name of
# the copyright holders not be used in advertising or publicity
# pertaining to distribution of the software without specific,
# written prior permission.  The copyright holders make no
# representations about the suitability of this software for any
# purpose.  It is provided "as is" without express or implied
# warranty.
#
# THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
# SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
# SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
# AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
# THIS SOFTWARE.

from __future__ import annotations

import enum

from pywayland.protocol_core import (
    Argument,
    ArgumentType,
    Global,
    Interface,
    Proxy,
    Resource,
)
from ..wayland import WlOutput
from ..wayland import WlSeat
from ..wayland import WlSurface


class ZwlrForeignToplevelHandleV1(Interface):
    """An opened toplevel

    A :class:`ZwlrForeignToplevelHandleV1` object represents an opened toplevel
    window. Each app may have multiple opened toplevels.

    Each toplevel has a list of outputs it is visible on, conveyed to the
    client with the output_enter and output_leave events.
    """

    name = "zwlr_foreign_toplevel_handle_v1"
    version = 3

    class state(enum.IntEnum):
        maximized = 0
        minimized = 1
        activated = 2
        fullscreen = 3

    class error(enum.IntEnum):
        invalid_rectangle = 0


class ZwlrForeignToplevelHandleV1Proxy(Proxy[ZwlrForeignToplevelHandleV1]):
    interface = ZwlrForeignToplevelHandleV1

    @ZwlrForeignToplevelHandleV1.request()
    def set_maximized(self) -> None:
        """Requests that the toplevel be maximized

        Requests that the toplevel be maximized. If the maximized state
        actually changes, this will be indicated by the state event.
        """
        self._marshal(0)

    @ZwlrForeignToplevelHandleV1.request()
    def unset_maximized(self) -> None:
        """Requests that the toplevel be unmaximized

        Requests that the toplevel be unmaximized. If the maximized state
        actually changes, this will be indicated by the state event.
        """
        self._marshal(1)

    @ZwlrForeignToplevelHandleV1.request()
    def set_minimized(self) -> None:
        """Requests that the toplevel be minimized

        Requests that the toplevel be minimized. If the minimized state
        actually changes, this will be indicated by the state event.
        """
        self._marshal(2)

    @ZwlrForeignToplevelHandleV1.request()
    def unset_minimized(self) -> None:
        """Requests that the toplevel be unminimized

        Requests that the toplevel be unminimized. If the minimized state
        actually changes, this will be indicated by the state event.
        """
        self._marshal(3)

    @ZwlrForeignToplevelHandleV1.request(
        Argument(ArgumentType.Object, interface=WlSeat),
    )
    def activate(self, seat: WlSeat) -> None:
        """Activate the toplevel

        Request that this toplevel be activated on the given seat. There is no
        guarantee the toplevel will be actually activated.

        :param seat:
        :type seat:
            :class:`~pywayland.protocol.wayland.WlSeat`
        """
        self._marshal(4, seat)

    @ZwlrForeignToplevelHandleV1.request()
    def close(self) -> None:
        """Request that the toplevel be closed

        Send a request to the toplevel to close itself. The compositor would
        typically use a shell-specific method to carry out this request, for
        example by sending the xdg_toplevel.close event. However, this gives no
        guarantees the toplevel will actually be destroyed. If and when this
        happens, the :func:`ZwlrForeignToplevelHandleV1.closed()` event will be
        emitted.
        """
        self._marshal(5)

    @ZwlrForeignToplevelHandleV1.request(
        Argument(ArgumentType.Object, interface=WlSurface),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Int),
        Argument(ArgumentType.Int),
    )
    def set_rectangle(self, surface: WlSurface, x: int, y: int, width: int, height: int) -> None:
        """The rectangle which represents the toplevel

        The rectangle of the surface specified in this request corresponds to
        the place where the app using this protocol represents the given
        toplevel. It can be used by the compositor as a hint for some
        operations, e.g minimizing. The client is however not required to set
        this, in which case the compositor is free to decide some default
        value.

        If the client specifies more than one rectangle, only the last one is
        considered.

        The dimensions are given in surface-local coordinates. Setting
        width=height=0 removes the already-set rectangle.

        :param surface:
        :type surface:
            :class:`~pywayland.protocol.wayland.WlSurface`
        :param x:
        :type x:
            `ArgumentType.Int`
        :param y:
        :type y:
            `ArgumentType.Int`
        :param width:
        :type width:
            `ArgumentType.Int`
        :param height:
        :type height:
            `ArgumentType.Int`
        """
        self._marshal(6, surface, x, y, width, height)

    @ZwlrForeignToplevelHandleV1.request()
    def destroy(self) -> None:
        """Destroy the :class:`ZwlrForeignToplevelHandleV1` object

        Destroys the :class:`ZwlrForeignToplevelHandleV1` object.

        This request should be called either when the client does not want to
        use the toplevel anymore or after the closed event to finalize the
        destruction of the object.
        """
        self._marshal(7)
        self._destroy()

    @ZwlrForeignToplevelHandleV1.request(
        Argument(ArgumentType.Object, interface=WlOutput, nullable=True),
        version=2,
    )
    def set_fullscreen(self, output: WlOutput | None) -> None:
        """Request that the toplevel be fullscreened

        Requests that the toplevel be fullscreened on the given output. If the
        fullscreen state and/or the outputs the toplevel is visible on actually
        change, this will be indicated by the state and output_enter/leave
        events.

        The output parameter is only a hint to the compositor. Also, if output
        is NULL, the compositor should decide which output the toplevel will be
        fullscreened on, if at all.

        :param output:
        :type output:
            :class:`~pywayland.protocol.wayland.WlOutput` or `None`
        """
        self._marshal(8, output)

    @ZwlrForeignToplevelHandleV1.request(version=2)
    def unset_fullscreen(self) -> None:
        """Request that the toplevel be unfullscreened

        Requests that the toplevel be unfullscreened. If the fullscreen state
        actually changes, this will be indicated by the state event.
        """
        self._marshal(9)


class ZwlrForeignToplevelHandleV1Resource(Resource):
    interface = ZwlrForeignToplevelHandleV1

    @ZwlrForeignToplevelHandleV1.event(
        Argument(ArgumentType.String),
    )
    def title(self, title: str) -> None:
        """Title change

        This event is emitted whenever the title of the toplevel changes.

        :param title:
        :type title:
            `ArgumentType.String`
        """
        self._post_event(0, title)

    @ZwlrForeignToplevelHandleV1.event(
        Argument(ArgumentType.String),
    )
    def app_id(self, app_id: str) -> None:
        """App-id change

        This event is emitted whenever the app-id of the toplevel changes.

        :param app_id:
        :type app_id:
            `ArgumentType.String`
        """
        self._post_event(1, app_id)

    @ZwlrForeignToplevelHandleV1.event(
        Argument(ArgumentType.Object, interface=WlOutput),
    )
    def output_enter(self, output: WlOutput) -> None:
        """Toplevel entered an output

        This event is emitted whenever the toplevel becomes visible on the
        given output. A toplevel may be visible on multiple outputs.

        :param output:
        :type output:
            :class:`~pywayland.protocol.wayland.WlOutput`
        """
        self._post_event(2, output)

    @ZwlrForeignToplevelHandleV1.event(
        Argument(ArgumentType.Object, interface=WlOutput),
    )
    def output_leave(self, output: WlOutput) -> None:
        """Toplevel left an output

        This event is emitted whenever the toplevel stops being visible on the
        given output. It is guaranteed that an entered-output event with the
        same output has been emitted before this event.

        :param output:
        :type output:
            :class:`~pywayland.protocol.wayland.WlOutput`
        """
        self._post_event(3, output)

    @ZwlrForeignToplevelHandleV1.event(
        Argument(ArgumentType.Array),
    )
    def state(self, state: list) -> None:
        """The toplevel state changed

        This event is emitted immediately after the
        zlw_foreign_toplevel_handle_v1 is created and each time the toplevel
        state changes, either because of a compositor action or because of a
        request in this protocol.

        :param state:
        :type state:
            `ArgumentType.Array`
        """
        self._post_event(4, state)

    @ZwlrForeignToplevelHandleV1.event()
    def done(self) -> None:
        """All information about the toplevel has been sent

        This event is sent after all changes in the toplevel state have been
        sent.

        This allows changes to the :class:`ZwlrForeignToplevelHandleV1`
        properties to be seen as atomic, even if they happen via multiple
        events.
        """
        self._post_event(5)

    @ZwlrForeignToplevelHandleV1.event()
    def closed(self) -> None:
        """This toplevel has been destroyed

        This event means the toplevel has been destroyed. It is guaranteed
        there won't be any more events for this
        :class:`ZwlrForeignToplevelHandleV1`. The toplevel itself becomes inert
        so any requests will be ignored except the destroy request.
        """
        self._post_event(6)

    @ZwlrForeignToplevelHandleV1.event(
        Argument(ArgumentType.Object, interface=ZwlrForeignToplevelHandleV1, nullable=True),
        version=3,
    )
    def parent(self, parent: ZwlrForeignToplevelHandleV1 | None) -> None:
        """Parent change

        This event is emitted whenever the parent of the toplevel changes.

        No event is emitted when the parent handle is destroyed by the client.

        :param parent:
        :type parent:
            :class:`ZwlrForeignToplevelHandleV1` or `None`
        """
        self._post_event(7, parent)


class ZwlrForeignToplevelHandleV1Global(Global):
    interface = ZwlrForeignToplevelHandleV1


ZwlrForeignToplevelHandleV1._gen_c()
ZwlrForeignToplevelHandleV1.proxy_class = ZwlrForeignToplevelHandleV1Proxy
ZwlrForeignToplevelHandleV1.resource_class = ZwlrForeignToplevelHandleV1Resource
ZwlrForeignToplevelHandleV1.global_class = ZwlrForeignToplevelHandleV1Global
